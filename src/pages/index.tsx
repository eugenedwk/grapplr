import { PrismaClient } from "@prisma/client";
import { type GetServerSideProps, type NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { QuestionBlock } from "../components/QuestionBlock";
import { api } from "../utils/api";
// import sampleQuestion from "../../prisma/sampleQuestion.json";
import { QuestionBlockProps, type QuestionPostProps } from "../types/types";

type QuestionPrismaProps = {
  questionPost: QuestionPostProps[];
};

export const getServerSideProps: GetServerSideProps = async () => {
  const prisma = new PrismaClient();

  const questionPost = await prisma.questionPost.findMany({
    where: {
      id: {
        equals: 1,
      },
    },
  });
  return {
    props: { questionPost },
  };
};

const Home: NextPage<QuestionPrismaProps> = (props) => {
  const questionBlock = props.questionPost;
  console.log("returned props", questionBlock);
  return (
    <>
      <Head>
        <title>Grapplr</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Grapp<span className="text-[hsl(280,100%,70%)]">lr</span>
          </h1>
          <h2 className="tracking-thin text-xl font-normal text-white sm:text-[2rem]">
            Get tech or get rekt
          </h2>
          <button className="bg-white" onClick={() => void signIn()}>
            SIGN IN TO DISCORD
          </button>
          <>
            {questionBlock.map((question, index) => {
              return (
                <>
                  <div>Question by {question.authorId}</div>
                  <QuestionBlock
                    key={index}
                    questionObj={question.questionObj}
                  />
                  ;
                </>
              );
            })}
          </>
          <div className="flex flex-col items-center gap-2">
            {/* <p className="text-2xl text-white">
              {hello.data ? hello.data.greeting : "Loading tRPC query..."}
            </p> */}
            <AuthShowcase />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
